Oleg Khazanov: Hey, Adam.
Sribharathi Modukuru: Yes.
Sarin P: Hey, everyone.
Cristian Adamo: Sure.
Sribharathi Modukuru: Yes.
Oleg Khazanov: Hi, everyone.
Ashwin Sureshkumar: Hey.
Cristian Adamo: Thanks to you.
Sribharathi Modukuru: That's correct.
Ashwin Sureshkumar: How's it going?
Sarin P: My name is Siding, and I work at Yahoo.
Arjun Shah: Thank you.
Cristian Adamo: Hello, everyone.
Sribharathi Modukuru: Thank you.
Subha Madaka: Hello.
Cristian Adamo: My name is Christian Animal.
Adam Johnston: Hey.
Arjun Shah: Thank you, Ian, and hey, everyone.
Adam Johnston: And how are you?
Sribharathi Modukuru: That's a very good pronunciation of my name.
Sarin P: So I'm based in Bay Area.
Cristian Adamo: I'm from Argentina, and I'm currently working at JPMorgan.
Oleg Khazanov: Hello, everyone.
Arjun Shah: So my name is Arjun.
Oleg Khazanov: My name is Luke Kozlov.
Sribharathi Modukuru: But let me shorten it to make it easy for everyone gonna help also.
Arjun Shah: I'm a where you are.
Sarin P: So right now, I'm a principal engineer and loading and move into a director role.
Oleg Khazanov: I'm a senior engineer a senior manager the Comcast Comcast is the demand supply platform for advertisement.
Arjun Shah: So I'm an engineering director at Garda.
Cristian Adamo: Leading one of the AI engineers team.
Sribharathi Modukuru: You can just call me Sri.
Arjun Shah: So, you know, some of you may note, Carter, that we manage equity for startups and do a bunch of other things.
Subha Madaka: Shuba is fine.
Ashwin Sureshkumar: Hi, everyone.
Sarin P: So I'm trying to understand more about managing managers part part of it.
Ashwin Sureshkumar: I'm Ashwin.
Cristian Adamo: And they're the main problem is, like, I have a couple of g managers reporting to me.
Subha Madaka: Shubhrant.
Ashwin Sureshkumar: I'm an engineering director at Wish, which is an ecommerce firm.
Subha Madaka: Nice to yep.
Adam Johnston: Hello. How are you?
Cristian Adamo: Most of them aren't really during your engineering managers, I would say.
Oleg Khazanov: I'm in Bay Area.
Ashwin Sureshkumar: So I'm I'm based in Toronto, so good amount of story here in the last few weeks.
Sarin P: Thank you.
Oleg Khazanov: And what's what's the biggest challenges?
Arjun Shah: I'm based in the Bay Area in North San Francisco here in Marin County.
Sarin P: Thank you.
Cristian Adamo: So I'm looking to see what are different ways to approach, leading them, supporting them.
Sarin P: Thank you. Bye.
Oleg Khazanov: I think, the money waiting people during the tough times.
Ashwin Sureshkumar: Our biggest problem right now two things.
Subha Madaka: Yes.
Arjun Shah: My biggest problem today interesting question.
Subha Madaka: That's correct.
Oleg Khazanov: Right now, that's definitely one of the main ones from you right now.
Subha Madaka: Yeah.
Adam Johnston: No. No problem.
Cristian Adamo: And, yeah, try to basically keep them and, basically, enable them to to to grow.
Adam Johnston: Ian, just a quick heads up.
Ashwin Sureshkumar: One, Wish us going or in in a turnaround phase where attrition and retention is a big problem for us at the moment.
Adam Johnston: I'm from the the Plano team.
Sribharathi Modukuru: Yeah. Sorry about that.
Arjun Shah: I guess, like, when to one thing that I'm still trying to get improve on is, like, when to influence without authority and went to maybe be able bit more authoritative.
Adam Johnston: Just here to kind of observe and support.
Sribharathi Modukuru: Yeah. Hey, everyone.
Adam Johnston: So almost look in the background.
Sribharathi Modukuru: Very excited to be part of this group.
Adam Johnston: But if if there's anything you need, just just just speak up.
Ashwin Sureshkumar: And do we restructure the teams given the environment and and manage enough knowledge in the in the in among the teams as this transition happens?
Sribharathi Modukuru: My name is Sri Modekuru.
Cristian Adamo: Yeah. I'm actually in Argentina.
Sribharathi Modukuru: I'm a senior engineering manager at Veera.
Arjun Shah: So, like, balancing sort of the authority aspect of our jobs.
Adam Johnston: Yeah. I'm on the product team at Plano. So just here to observe and see see what I can do to help.
Sribharathi Modukuru: I'm based in Bay Area.
Cristian Adamo: Thank you.
Arjun Shah: So that that's something that I would be interested to learn a little bit more about.
Adam Johnston: So let me know if there's anything you need.
Sribharathi Modukuru: It's been raining, actually, for us here. But today, it's actually okay, but it's been raining for the past few days.
Ashwin Sureshkumar: So thanks, Andrew.
Arjun Shah: Actually, Ian, I had one question.
Ashwin Sureshkumar: Just a quick question around this.
Adam Johnston: Yep.
Arjun Shah: I don't know if this is gonna come be covered.
Ashwin Sureshkumar: You said you had a lead engineer who was an expert in the field and your team around him building.
Adam Johnston: Looks great.
Arjun Shah: By the way, I'm also a fellow Amazonian.
Sribharathi Modukuru: So my biggest problem is that I'm my team is expanding, and I think I'll be getting another team under me along with the debt manager.
Arjun Shah: So hello?
Adam Johnston: Yeah. I think if you go to full screen on the slideshow, it it should show up properly.
Ashwin Sureshkumar: And once a lead engineer left, there's a back human knowledge and building out.
Arjun Shah: The question that I had was, like, how is the like, I don't I guess, like, try to phrase this, like, has the role of an engineering director changed in the last, maybe, three or five years?
Ashwin Sureshkumar: So and you mentioned earlier on you had identified that he was an expert and the team was not up up to his level.
Sribharathi Modukuru: So I want to know how do I zoom out a little bit and I'm covered the manager without being, like, a frontline manager.
Ashwin Sureshkumar: And this is pretty common in many places where your smaller teams.
Arjun Shah: Like like, how how hands on do they need to be in the modern day?
Ashwin Sureshkumar: I always have a challenge is to how you build backups around especially when when you identified this vacuum could happen at any point because, especially, when when a departure time is two weeks.
Adam Johnston: Yeah. Yeah.
Arjun Shah: And, like, you know, like, at what like, how do they operate?
Sribharathi Modukuru: Right?
Adam Johnston: I I see it in full screen now.
Sribharathi Modukuru: So that's what I've been wanting to learn.
Adam Johnston: I think maybe if you're if you use your arrow keys, that should advance the slides.
Arjun Shah: I guess, the dive deep LP, like, makes sense, and, like, would love to get into that at some point.
Sribharathi Modukuru: By the way, Ian, I have read some of your seven areas of management.
Adam Johnston: Does that work for you?
Ashwin Sureshkumar: Right? So I wanna get your thoughts on anyone's thoughts on that.
Sribharathi Modukuru: They're excellent material.
Arjun Shah: Ian, what mechanisms did you have to put in place and Datadog.
Sribharathi Modukuru: Yeah.
Ashwin Sureshkumar: Yep. Yep.
Sribharathi Modukuru: So many, you know, tidbits of wisdom there.
Ashwin Sureshkumar: Sounds good.
Sribharathi Modukuru: Thank you for writing that.
Ashwin Sureshkumar: I have a good question.
Arjun Shah: I think one question I would I'm kind of in this situation right now.
Ashwin Sureshkumar: So on one of the slides you mentioned about being on top of all things, you know, good quality.
Ian Nowland: Adam Adam and Suba.
Adam Johnston: So if you're in the window for the video call, at the very top right corner, there's a little picture and picture button.
Ashwin Sureshkumar: And and as you grew higher, you have managers under.
Arjun Shah: Where, like, there's a a very aggressive, like, top down timeline, launch timeline to meet, and, you know, the that cons it's constraining me to be tactical for a quarter.
Ian Nowland: I'm working out my my slides at the moment. To, you know, take me a couple minutes.
Ashwin Sureshkumar: And you have multiple teams.
Sribharathi Modukuru: Oh, I think she sent a chat message saying that she's traveling, and she can't really Yeah.
Ashwin Sureshkumar: And as you said, very states we have different practices.
Adam Johnston: That should give you the video of the participants.
Ashwin Sureshkumar: How do you stay on top of it?
Adam Johnston: Yeah.
Ashwin Sureshkumar: What kind of what kind of rituals do you or what kind of staff meetings do you hold with your immediate reports, which is your engineering managers, senior managers.
Sribharathi Modukuru: Yeah. Yeah.
Arjun Shah: So, you know, how do you balance like, a, you know, aggressive timeline with not being tactical or already tactical.
Sribharathi Modukuru: Hey. Again, this is Sri. So what was in general engineering guidance at that time regarding unit tests.
Ian Nowland: Sorry. Aviso, the eFront Player?
Sribharathi Modukuru: I was just wondering, is your team just, like, kind of one of the teams that are not doing the thing?
Adam Johnston: Yeah. Looks great.
Ian Nowland: Okay.
Ashwin Sureshkumar: Yep. So just just a quick follow-up on that. So on your staff meetings, you have a weekly staff meeting, do you cover or touch upon, like, for five minutes on any of these or I know the skip levels are monthly, quarterly, and then the integration going into production is a reactive because it's happened and you're reacting to that to increase the quality.
Ian Nowland: I'm just playing with how do I get my Google Slideshow presenting?
Sribharathi Modukuru: Or, like, I I'm just wondering, is it, like, each team is on their own to decide how many tests I was just wondering if you had, like, a engineering wide mandate.
Adam Johnston: We've seen most people join within two, three minutes of the start time. I think all told, if everyone shows up, we'd have twelve, and we've we've usually seen seventy five to eighty percent.
Ian Nowland: K.
Adam Johnston: Show up. So sure.
Sribharathi Modukuru: Yeah.
Ashwin Sureshkumar: But to so to be proactive, do you do you cover anything on your staff meetings?
Sribharathi Modukuru: Or or a strong recommendation. Yeah.
Ian Nowland: Shit.
Sribharathi Modukuru: Okay. Quick follow-up question. If you're okay, can I ask?
Ian Nowland: You can see that?
Sribharathi Modukuru: Or yeah. Yeah. So looking back, right, do you think that such engineering culture of having, like, I don't know, seventy to eighty person unit tests or whatever.
Ian Nowland: Excellent. I mean, you see the whole window. Right? Not just Okay.
Sribharathi Modukuru: Some percentage. Right? Would have helped you in the situation. Or if you were to do this again, maybe you were your in your manager role, would you have mandated that.
Adam Johnston: And just one quick point of where hi, everyone. I'm Adam from the Plano team. Really appreciate you all joining today. Ian, thank you for leading us in the session today.
Ian Nowland: Let's try this.
Sribharathi Modukuru: I'm just curious.
Adam Johnston: We'd love to get your feedback. If you click as you're leaving the session at the bottom right, you'll see a leave button. If you click that button, it'll take you to just a really simple form to give feedback here. So if you wouldn't mind taking a quick second to fill that out, you would appreciate it very much. So thanks again, everybody, and have a great week.
Ian Nowland: You can say that. Right? The question is just that how do I control it?
Sribharathi Modukuru: Okay.
Ian Nowland: Because it's got the this is in focus. This view.
Sribharathi Modukuru: Okay.
Ian Nowland: If I go okay. And I can if I do this and I can't see anyone.
Sribharathi Modukuru: Yeah. Yeah.
Ian Nowland: Okay. Breaks it out. Okay. Excellent. Okay.
Sribharathi Modukuru: Yeah.
Ian Nowland: Structure. Stop for vacation. Let me start it. Right now. Is that you're you're getting it right? Okay. Excellent.
Sribharathi Modukuru: Thank you.
Ian Nowland: Now I can see everyone and control things.
Sribharathi Modukuru: Hey, Yan. When you are a very senior leader, right, when you have, let's say, seven hundred hours. So people that you said that data doc, right, how do you make sure all your leaders under you are doing these things, like skip level one on ones.
Ian Nowland: Okay. Excellent. We should is it is it as super or super? Actually, I don't have pronounce your first name.
Sribharathi Modukuru: Yeah. How do you stay on top of that?
Ian Nowland: Shuba? Is it Indian? Okay. Interesting. I haven't heard that one before. My wife is going easy in the end, but they they tend to not take the traditional Indian names.
Sribharathi Modukuru: So just a follow-up question on that. What type of questions do you ask in the one on ones? In in this skip one on ones, you know, to get the pulse of the health of the org.
Ian Nowland: Yeah. I just wanna note, Clint.
Sribharathi Modukuru: Thank you.
Subha Madaka: Sorry. I don't know if you were calling to me. Yeah. No problem. Hi, everyone. I'm Shuba Madaca. I'm connecting from Ann Arbor, Michigan where it's, like, knowing today.
Ashwin Sureshkumar: So here's a question on on on your seventy one on ones you had.
Ian Nowland: Hey, Shubhrant.
Subha Madaka: So for those of you connecting from Walmart clients, you know, IMU.
Ian Nowland: I see.
Subha Madaka: I currently work at two security, which is a small cyber security company, which is part of Cisco.
Ashwin Sureshkumar: With the team, what was at least top two surprising factors that you didn't expect because you've been managing really high and going all the way to a junior engineer.
Subha Madaka: We work on multi factor solutions and providing zero trust portfolio of solutions. As far as what is the biggest problem today, what I would say is throughout my career span in a with leadership roles, I've transitioned between different types of leadership roles, and doing that transition in a way that can maximize potential at different levels is what I would say is the biggest problem I'm facing.
Ashwin Sureshkumar: What are the two surprising factors you got? Just curious on that.
Ian Nowland: And is the guidance on how how long you generally wait before you start?
Ashwin Sureshkumar: Thank you
Subha Madaka: Like, as in, like, when I move from, like, front client management into, like, a slightly different role. How do I transition how I work?
Ian Nowland: Okay.
Subha Madaka: Hey, Yan.
Ian Nowland: That's right.
Subha Madaka: I had a question.
Ian Nowland: I guess we'll go for five past two for this one.
Subha Madaka: One of the things I was thinking was in this particular instance, this was the scenario and you came up with, like, a miss you had. Right? The question I had was, typically, do you, like, have, like, some sort of rituals that you follow on, like, just doing, like, a pre mortem sort of, like, what could be the potential misses that you may not be?
Ian Nowland: So I've seen a a June insert. It's interesting. The one downside of the pop up window is it doesn't show the names of people who have cameras on, whereas the non pop up window has denied. So I'll have to go back and forth a little bit. Okay. One moment, and I'm gonna start.
Subha Madaka: Thank you.
Ian Nowland: Okay. I'm I'm gonna kick off. So Thank you, everyone, for joining today. So my name is Ian Olin. So this is one of the things when you commit to doing a a talk before you actually do the talk. As I was developing the content last week, I decided I was actually this is a older talk that I I developed about four years ago, which I was gonna use as a framework. But, actually, as as I developed and I realized it actually works pretty well for the talk itself. So so you see it's a presentation that I give a very areas where we would sort of wanna have a conversation. I've I've done this over two hours before. I've never done this over four hours, but I think that this first one would definitely see how good see how much conversation generate. And also tell me how to how to do it later on. So once I start just with the introduction, there's not too many of us who can actually go around just find out who each other are. Basically, just do a quick intro, you know, who you are, where you are, where you work, and what is your biggest management problem today? I think was I'll try and then pull that back in as I actually do the presentation. So I'll start with myself. I'm an intern in Holland. I live in New York City, and I was on Friday, actually, at Monday point. So Friday was my last eight days on. I was an SVP of engineering for four years. So my biggest problem today is relaxing for a little while and then maybe fighting a new job. So I'm gonna go top to bottom just on the end. So I joined fewer stuff. Yeah. It's a really good toy. It's a bit back weighted in the series, but it's it's actually like this sort of the heart of the series. I I think it's the hardest thing as you move up. Is happening with that. So that's that's great. Supya, could you introduce yourself? Yes. Yes. Sorry. I did. I think your name right. Okay, sir. Thank you. Ashwood? Excellent. Thank you. Alright. Excellent. Thank you. Sri. Now you're muted, Sri. No problem. So this you you see some of the same content here, but I thought it's much better as a presentation in writing. So and it should be a lot more relevant, I think. So hopefully, you know. Any case, and we'll keep moving as Sarah. Excellent. Thank you. And tomorrow, Christian? Now you're from agitator, Christian. Are you actually imitator or are you well, that's not sweet. We have some well, we someone in America. So finally, he might take it. If she doesn't have this camera on, you know, It's just calling. Okay. I don't know where I okay. We'll have I'll work out what chat is after. Okay. So now so as I said, I've gotta give lots of breaks, but this will be a little bit of presenting. So so my background so I've been in the industry twenty three years. I switched to management after it. I was an engineer for a ridden on time. I was an engineer at Amazon for a ridden type before I switched. So I I knew a lot of how it worked already, which which is a big advantage that you sort of start losing in later roles. So I've got this thing called EC two Nitro. I'll talk about a little bit just to to frame it all. Like, we're back from zero to fifty two. Basically, we're building a corporate building a business And this is just one year to becoming a manager. And so, you know, I was extremely driven, you know, I was, you know, sort of the star to some sense, a lot of senior people were looking out for me, but I built myself out. And and when I built myself out, I was blaming a lot of other people. For for what the mistakes that I actually, in hindsight, man. So that's what I I've joined this intercut to Sigma. It's kept making similar mistakes, and then really sort of step back and sort of Okay. How do I deal with the fact that as I'll talk about? It's just far too much work to do to do it perfectly. What does it mean to be an imperfect leader? I've been a very good leader. So in just the last four years, you see this, especially in the last few things I I have referred to people. Until until I joined their doc, I never managed more than fifty people. At day two, I grew to seven hundred pretty rapidly as we went through IPO and we kept growing. And as of Friday, I sort of moved on. Data was great to me, but it was it was just talked to the next step for me. Okay. So this talk has has sort of three dimensions to it, but and then I they actually flow together, I think, pretty well. But the first is I'm gonna lay everything out in terms of the seven areas. So, basically, I I'll talk about the more in-depth later. But my main intention is, you know, especially in, like, what we call modern or what I call modern agile demo. So we're so iterating and constantly releasing, and we generally have teams that operate the software. That sort of has write the software. So much of balance relies upon an engineering manager and relies on engineering manager. And my the core point of this talk and my sort of call of managing by missing is this is just far too much work to do. For what you mean. Like, there is no way everything that we're expected to do as leaders that we can do perfectly in a way that there's never negative surprises. And so I I called these very different. It probably misses and not failures because failures you you can sort of own your own failures in a way. If you ever wanna have us talk with someone under you and say you failed, that that's a pretty blood assessment of something where you really want them to learn. So I tend to like the missus terminology. Firstly, because it's not quite as blamey. It's not quite as you've clearly made this mistake. And, especially, you sort of see this throughout the talk because a lot of the staff that I early on the mistakes I made, I'd always say, well, someone else made a bigger mistake. So that wasn't my mistake. And what I really realized after, like, you know, a lot of maturity is a lot of my mistakes were in action. And if I didn't get in front of a problem six months, I'll I'll and, you know, someone else is just all party in their own space. The problem is gonna happen. And so when I start thinking about, okay. How do I actually be more mature got these things to get went wrong, is working out is basically owning them even as I want to play someone else. Two of that though is just realizing there's too much. Like, the the the we we are asked to do too much in this industry. Sort of why this is how we have grown so rapidly the last twenty years, but it's just too much for us to do. And especially though when you get to, okay, because we're constantly growing. We're constantly training people in this space where there's too much to do, And for them to actually learn themselves, they're gonna have their own business. And so so part of them becoming a leader is just becoming more accepting that these are gonna happen it's all about how do you react from how how do you learn from them and and part that knowledge. So it's somebody that I got to do for you. You'll see as I pull through about it. I'll I'll come back at the end and talk about these. Well, But these are, like, the broadest. As I really reflected on my biggest mistakes I'll talk about. And so the first one you you hit this a lot, the only thing you control the entire with your because, like, there's a lot beyond your control, and you have to accept that and realize at the time, you you need to be using these in the best area. And so the next one is a cashing q five. I I think everyone in this script is probably mature enough. You you classically find, like, early on. You go heads down yourself a few problems. A bunch of other problems will happen. And and you go, well, it's doing the right thing because this one was critical or this one was urgent and they weren't. Which is you might have been making the right decision that you have to realize that this is what happened. The the third one, like, you really have to own them. I think this is you know, often if you're buried river in a mistake happens, you wanna say, what else can I have done? Like but to me, the the best thing about acknowledging this is it allows you to reset narrow. But as you can reset the story and avoid things going forward. You you really have to own it. You can't you can't say, oh, something bad happened. I'm not to blame but here's my solution of how to fix it. You you only have to own that the problem shows. That's sort of the fourth one. It just comes back again. It's a sense of narrow. It's a sense of story around how we've gotta do this right, how we've learned from it. That's good. This thing and this is definitely, I think, you know, when when I sort of get this at the director level, And this is a big inversion of mine. Like, for a long time, I was purely managing downwards, and I and I wasn't really seeing that I was part of the management team sideways and, like, if I wasn't trying to do relationships with them, the pros were gonna happen. So a lot of, as you get more seeing, you know, how you need to manage this through your partners. Basically, you as a team can do a lot more. And so next one is just the delegating using trust. I forgot about mechanisms. That that'll be later in the thing. But, like, you hear often big leaders talk about mechanisms all the time, and and I I do believe in mechanisms. You always wanna balance those with trust. Like, people who are too mechanism driven as leaders are just as bad as people who are just too too trust group. So let's talk about that. And finally, I'll talk about it's influencing roundabout four six. So sort of what I think Arjun was saying earlier that a lot of the time you know the right way and you and you know it's gonna cost if they don't listen to you, if you just force your preference on them you've created this thing where where they're just doing what you want. And if it doesn't quite work out, well, they blame you and you blame them. It's an underbite, they're the issue. I think that's one of the hardest things as a leader. What what's this what's the right amount of rope to to give to leaders under you? So that's that you you I'll have stories behind all these lessons. We we've got time. Do does anyone have any questions there, or should I just get into the first area, which will be more interesting? No. What? So let's get into the first slide. So you'll you'll see that all all seven areas have this framework on. It's a good topic. And, definitely, I'll I'll give you an answer, and then we'll see how the government is there. So so director means an incredibly different thing to every company, like, at at a true thing where director level is eighty, very, very different. Say when I got to Datadog when direct direct level was twenty. And when it really comes down to it's actually that part of this thing I talked about later, how much does the right thing happen? Like, if it's just you and four fellow directors and the right thing is happening, that's an incredibly different job to if it's you, and there's fifty other directors, and there's a bunch of crosscoming concerns. So so when I got to Datadog, it was three hundred fifty agent is. I think there's, like, ten directors. And they could be agile as hell. They could deep dive, and they had a high trust relationship. And as it scale as it scale then, they would like, did the role change to that? And then people would say, well, this company is becoming more political. But also what they meant by that was just more people had disagreeing opinions. On what was right. And so it's very much like the partners thing. But I'd say it's very company by company, and they all call director. It's made a function of size of all size of your room and then total size of company. The the moment, you're just you you have a lot of people, but it's just like a hundredth of the companies have care. It's gonna be a very difficult decision. What the right thing for you to be doing is gonna be fairly political. Like, it's gonna require a lot of the work So I'd say, I don't think it's changed in the last five years across the industry. I think it changed fifteen years ago in the industry when we really go to DevOps because I'm in operational. Concern. Like, Amazonians understand this really, really well. But, like, it just changed the raw mentality when you actually have to worry about the site going down at 02:00 in the morning. But it it totally does change. It's the one that changes a lot as you just go to different companies. That's fine. Just different different exercises. Any more questions? Okay. So so this is I'm not gonna go super technical basis just giving people a sense if they I've already got it. The EC two nine four was basically taking the v one EC two hypervisor platform and sort of total re implementation. So what this picture is so showing is a a little daughter board inside the inside the the motherboard. This this sort of board had a CPU on. So, basically, what it meant is you could offload all the software that used to run on a customer's CPU onto the secondary CPU. Don't require all that software to be written from scratch. No one was doing this at the time. So this was a massive initiative. So you see on the slides starting two thousand twelve. Really early did the full vision in twenty eighteen six years. I live four years, and the first four stories, I think, are all gonna be a rep around this, and they're all gonna be sort of as I was slightly lower. Lots of them I'm guessing a lot of them just given who how we thought about. The first one or two, you might have heard of already, but I still wanted to talk like, have grown past or anybody still wants to talk about the lessons. And so so so, again, when when I think about the the seven areas and what I and, you know, I think about really idealistic management. I imagine everything in your team that has to be done really, really well, that if you were the perfect leader, you'd be able to say, yes. This is happening. I know I have industry based on code quality. I know I'm in district first. And then I think the in interesting thing with this area of engineering is it's our firm. When you first convert, when you basically go from an engineer or a team, often to being a live management team. This is the one you absolutely have the answers for. You know where the tech did it. You you know where, like, oh, there's bad test coverage and stuff. That's often only as you grow, and you take on other teams, and you have have a manager under you. And they're saying the right things, Why are you trusting? Like, what what's actually telling you? And if you're a massive company, sometimes they're standards and you're just trusting the standards actually. If you're at a midsized company, oftentimes you'll see, There is no standards. And if if you just pretend that that you you assure that things are going very well, you might come in, like, six months later, then you might, like and and just find, hey. You know, there's a massive amount of text that this would help together with PyTorch and Stream. It caused the six hour outage, and now it's gonna take me to use the feature. It's a testing thing when you take on Teams rather than go from scratch. You you sometimes find yourself not knowing until until I think so. Because that's a miss. So so how do you avoid? This story is actually a little bit different. This is a story where I created the tech and I knew about it and I didn't do the right things about it. So in twenty twelve, we started this Nitro initiative. It was a seven person team But, actually, the principal engineer report to my manager. And that that's always an important thing. I'll come to a a lot of time. Right? People under you will defer to you a little bit. Like, there there is something about a managerial relationship that if you say, hey. We should do x. It's not like they're gonna listen to you and not quit on you if you if you're if you're an asshole. But if you're there's something where so much are pretty reasonable, and I like you. They're gonna do it. You say, well, this was a case where this wasn't it's a principal engineer reporting to my manager. He was ex Microsoft. At Microsoft in the Windows ten, I didn't believe in unit testing. Basically, they they had one test engineer for every software engineer, and they had the best integration test on this Windows stuff in I really, really good. Often people, Eastern European, who wants to come through Vancouver on the way down to Redmond, but they had a really good team. And argument to this data engineer was like, well, that's fine, but that's what Amazon we don't hide test engineers. I'm not gonna hide best in industry test engineers. I'm definitely not gonna put half my team on test. Which is the unit test. Like, that's sort of what most DevOps people say is the practice. And he absolutely refused. He he he basically said, if you want this, I'm gonna quit the project. Now we're talking to my manager and saying, look, this is this is completely impossible. And and my manager had this slide. It's like, oh, do you want this engineer on the project? And he was a well expert in virtualization, or or do you wanna be right? And it was very, very easy for me to actually say, want this engineer in the project, but I'm gonna have to do things here's what I'm actually gonna have to compromise from my own standards. So we did that. And it it actually was a a great success. Released fifty v one on time. It was the networking staff, fifty thousand lives, I see. This this actually wasn't what expert. He wrote over eighty percent of the code. Just because he was so productive. What I did do, I took two two of my more junior engineers and had them just write integration tests at the time. But I'm on integration test experts. And so this sort of get what you get with integration test. That that tends to be shallow off, like, here, definitely not in-depth testing at the current Nonetheless, though, we released some time. And this was a great success. Jackie, we're on stage, released the c three instance type. You know, we're sort of totally burnt out. Like, in terms of we were working super hard to hit this, and it was like, oh, jumbled up. Like, you know, this was fantastic. Life time experience, yeah, let's move forward. Okay. So move forward the next year. Rapid growth all going well. We're starting to do. We actually move on to new hardware. Actually, we can talk publicly. This was And in front of the labs, people who make all of our AWS's Arm stuff. This was the vendor. This was this was this was super exciting And the third point is the main point. So we start and the lead engineer he was super excited because, like, well, if I'm gonna work that hard again, I'm gonna do what my own stuff. So selling out of nowhere, I just got hit hit out of a blind with this surprise. Like, I couldn't have done anything about those more safety. He he was leaving a lot of money on the table. Just decided he needed to do this. So what did I do? I I took I took his code and gave it to a strong junior engineer. So the team was probably about twelve at this book. So I had half a team working a bit too. Half a team working on b one. So I give it to the star junior engineer, and you know, so to say, hey, job done. Right? Like, we're gonna move forward completely beginning about all over code that didn't have the unit tests. So all my focus was something to July. And, actually, it was the original to come up with this bug. It took four months to make into production. This really wasn't too characterized by it's a bit to byte, the divide by I. It was in some ICMP messages up there. It wasn't it wasn't taking our customers down, but it was causing incorrect behavior. And it cost me two developers of my of my lead engineer and my star engineer to resolve. So so all all of this happens, this gets into the okay. This is clearly one where I made a mistake. And when when I really started assessing it, it's like, Oh, it is it's a little bit different. I I actually have, like, the force majeure wasn't that I could get the unit sales. Like, I I tried I put so much time and effort into it, and and I missed it there. And I do think no one else in the world or no one else we could have hide at the time. Would have made a difference. So so I don't think my mistake was was compromised by images. My big mistake was in in March. Where I I had the ability to do a reset. I had the ability to say, hey. I've got all this code, and the guy who wrote it as Gong, and it's a junior more junior entity, Should I do something? And I didn't do anything? And so so really what it was, I put I was putting all my time and focus into it too, and I didn't talk about I didn't even think about the tech that anything as a leader that that didn't do an end of my mind as a as a reset that I have to do. Chris comes to the broad lesson, and Ashwin's got a question, but I'll keep q and a straight out of this. So so the manners for me is as a manager. Right? It's the only thing you control as your manager in your your phones. Like, every so you need to always be evaluating, are you using? It's it's very, very easy to get core to what you're doing, and not using them in the optimal manner of the time. So with that question, period, am I gonna answer Ashwin, would you say? It's it's a really good question. So this was an a case. Like, this was someone with ten years of expertise in something that we were just getting into. So so, like, the and there's always this thing. I don't know anyone who's been from Seattle like Microsoft. There's probably ten people like him at Microsoft. Probably wanna come to Seattle. Probably ten people got a PM where we could do it. But if it really was an extreme amount of skill he had in something that was completely essential. And to get about his talent, like, he was just a fantastic career, actually fantastic energy, and later. Just in my mind, completely wrong about Unitesh. So so what you try what I tried to do throughout the process, and and he was actually amenable to this, was always pairing him most closely in his work with the strongest more junior engineers. But these were often the people who were strongest around the CECO with people three to four years out of school. So, like, if if he's up here, they're, like, coming up here. And, actually, the the the guy who I talked about who actually handled his career. That was my strongest engineer, but I think he was literally two years out of it was just great at writing embedded secret. Like, you can see that guy, like, in GDB, and it was just a start. There's basically a thing where so my strategy was To the extent that, you know, if if you have this nucleus, make sure the nucleus' time is trained on your strongest engineers as opposed to the entire team. This is, like, the people writing the integration test, far more of their direction came from me than from him, actually. So that that was my strategy. I think it was a I think it was an occasion. Like, I I wouldn't I I don't like, again, the thing that hit me was him quitting and, like, just completely up like, he came from nowhere that he was even unhappy and geeky about it. But that was the type of personality. He was alongside. But I do think, again, taking the strongest engineers who had the closest much, very skill set, and keeping them close, that to me is the fastest way to scale up engineers in the space. Does that does that make sense? Okay. Any more questions? So, I mean, do you have questions about the broad lesson? I have have do you have challenges today with, like, just engineering quality? And, yeah, would would would you do something different, do you think? Yeah. That's a really good question. So so Amazon and this came from Bezos, like, two thousand and five era, talked about this totally independent two pizza t. And Bezos was like, you can do whatever technology tools you if if you have your tip pizza team, you can do whatever you want in many So Amazon was like the the one extreme spectrum in terms of no company wide standards, and it was very, very cultural Like, you know, if anyone as you could probably say, Amazon at the time was extremely like, well, this is we're doing the right thing, so we're allowed to do our own right cross our own process. There's no globally right process. So so it's sort of like, oh, I think it was a very libertarian event culture, very bottoms up in terms of allowing independent experimentation. But there was nothing at Amazon. There was nothing in EC two as a standard. Now some say directors, VPs, board instance. That gets back to sort of what I talk about with these areas. There's bits where you can just rely on the company, and there's bits where you could But my manager didn't care. Like, I I could tell you, there was vast parts of these two at the time with my unit tests and my manager. That to him was not where he should be spending his time at focus. So it wasn't longer I could just rely upon the company to do it. It's actually a a Datadog, which was good on unit tests, but there's probably other aspects of of quality that were were more variable. You'd often find people coming in from very big companies who would assume that there'd be company wide standards And it wasn't. It just wasn't the way that they got COVID did. So so this is part to me, do you wanna think of the area even if you get more senior? What are you assuming the company is telling people to do? Because you find some companies will tell you to do some things and not not credit quality is like architecture reviews and all. Well, some companies are very, very rigorous. If you're gonna build a new system, have an architecture board. That was a classic firmware. Datadog didn't really like architecture. So people would post RFCs, but there was no one had to sign off. And so you'd see managers come in and assure there's gonna be this big sign up process and there wasn't, then their team goes the wrong thing. And they go, well, shouldn't the company have stopped them? And it's like, no. No. No. That that was you. But no one was telling you that. So, yeah, it's a really good question. I've done it's very dependent upon company culture and especially as you get to a middle layer, Like, you can decide to spend your time in focus, but do you wanna do it? Like, it it takes your time if if it's already set for you. So this and there's two different questions. If the culture so so cultures become norms, Right? If the culture was, this is what we do at Amazon because we are Amazonians. That becomes tremendously influential to the individual. It's very, very different to just say manager saying this is the right thing. I I tried, and this wasn't my direct. Actually, it was my bit. I tried to say this is the right thing. That totally failed. But I actually agree with my manager or maybe it would have taken my manager's manager. If they put a standard in place that this is what they they want, which this is essentially a mechanism we'll talk about later. I totally think he would have done. Like, it would have been hard far harder for him to go against a cultural practice as opposed to just the manager saying, no. No. This is my this is how I think we should do. Because, of course, he came from a company with a different cultural practice And it's so so that the bit just is right. Like, again, if you have great test teams, you probably don't need to do unit tests. It's just most of us do not have great test teams It's how we can do. So yeah. So it's it's it's interesting. This is where especially as you move up, where you spend your time and focus. It's just a pressing problem. Often you need to get ahead and and but but it's yeah. It's a they don't wanna say on on your test when I got there. That would grade at the unit That was not when I had to spend any time to focus on. Tell me about this stuff. I I did have to spend time with my business. It's a good question, and I I actually don't cover this, but I'll I'll just tell you what I do. So so for me, the part of the seven areas, it just a framework to make me just break it down? Like, it's like any framework at the end of the day. You could use it. What I really go into a Datadog was quarterly OKRs. So what I would do is I'll list out the seven areas and list out my two to three pressing problems. And then so it's basically you can imagine. Area, problem, action. And then what I'll try and work out is for me as a leader, where am I gonna spend the time? Where am I gonna spend the focus? And then I'll just sort of stack right with them then in terms of importance and urgency. And what I find is at the end of the so see so I started with, like, twenty. I I can then it comes down to about ten. And, honestly, any quarter, I would actually succeed at five. So so, like, I always run out of time. Other stuff would come up just that's the nature of a job. But that was a nice thing where I was always being proactive. You know? But it really was you know, this is why I have all the questions that I had as part of this thing is I'm just trying to think through okay. What information do I have there? I'm actually here trying to get ahead of it. I'll say, like, in in reality, like, off of my I I use I use a diagonal and skip one on ones. And what what I'm getting in those is the early signals that something might not be right. Right? Like, I hear from a a principal engineer, something isn't going fully right. I talk to the manager. Managers thinks it's okay, but they're super busy. Then I go talk to another another principal and I hear it again. Then I'm asking questions, and that's how it makes sense to my spreadsheet. But it was I was pretty good at it at day job. Like, quarterly quarterly resets And, yeah, again, I had to accept the fact that I was never gonna hit or ten, but at just eighty five, he gave me good sense of progress in the job as well. I I was making difference, which sometimes our client is hot as you get into middle manager. Any more questions? So it's a great question. It's like it's like, I actually use the seven areas when I interview, like, leaders VPs for potentially a day ago. And I asked them this. And so I've I've heard from a lot of people. And, you know, the the reality is you can it's just you you hit us a lot. There's trust and there's mechanisms. So what trust looks like for me in this one, the way you get information from trust is actually those skip one on So, like, I oh, generally fine. What what I wanna hear is information from different sources. So so a lot of what I'm trying to get out of South engineer or for its engineering team going with you is 01:01, which I do monthly or quarterly depending upon exactly how they're doing. A lot of what I'm trying to get is what's happening on the engineering graph? Right? We were all engineers once. We know what goes wrong. And so so, like, you I really wanna encourage them to complain to me in many ways. Not knowing the way where it's like, Ian, please fix that. And it's more like, Yeah. This this sounds like it's gonna be a headache. You learn a lot honestly from that. Then the one and, actually, I think my my public. This is one where I I have written in my in my video post. You can rely upon mechanisms as well. Right? The sort of classic example is the code coverage one. You can say seventy to thirty percent code coverage. You can measure that. You can choose monthly in terms of OKRs to talk about that. I I I never big believer I can make mechanisms. What I always say though is if you have twenty important mechanisms, if you have twenty important SLIs that you're measuring, you have zero important SLIs. So to me, mechanisms, you really wanna use them reactively to a problem. Let's say you have some regressions getting into production, and you get the team to work on on code coverage. And you find you're at forty percent. Then actually having a goal that you're gonna talk about as a leader every month is a great way to actually prove it. I think where the leaders get sort of screwed again, this is the the sense of wanting to be perfectionist. If you think everything, you can measure about this role in terms of your teams, you put that in front of your your middle managers and said, you have to be on top of all thirty, they have no time. They're gonna start gaming assist. But I would say, again, when you have permanent problems, SLIA, SLR type stuff is is the way where it's unit test coverage, integration test coverage, the customer paper. Remember that? I would say so it's an interesting question because I've been managing more than two hundred for the last three years. When you're managing two hundred in the start meetings, generally, I talk a lot of my problems would be product, would be engineering architecture, or product direction. And so a lot of what it's discussing is, like, why do we have two organizations fighting over what is the right thing? That's a lot. If you think about it, as you get more certainty, your time horizon gets longer. So that's that's a lot of what I've got. So feeling it though, if I was managing fifty, I would be spending time. But, again, what what I try and do is keep a Like, you know, what what you don't want is that leadership meeting to become just administrative checking. Your your leadership meeting should be interesting conversation about trade offs that energizes people to do the right thing. So it's always find the subset. It's interesting to think, probably a two sigma oh, you actually use you can see, like, a two sigma is a fintech color. I definitely did that. So so you hear later later in the presentation how it was ordering servers on time was something we had to execute on for operations. And I just had to go to pure mechanism which meant check it. Like, that that's a pure check-in type mechanism. Okay. Anything else? It's a good quote. I might need to think about that because I had a quick jump on Friday. Lot of I wanna say a a simple one, actually, which does kind of engineering, but was a massive change to the culture with change management. So There you go. It was very much you build it. You own it. So you own it. Each thing independently, and, like, constantly, like, feature flags like crazy, constantly releasing releasing to production. And, of course, as we had more regions, as if we got bigger, so we were just having outage up to outage up to outage. So mechanism there I have to put in place, which change management is the process. The measuring adhesion sorry, adherence to a change management as a as a mechanism. And that wasn't present. Like, it's not like I love mechanisms or whatever. But that was one where, honestly, part of what I talked flavor about it. I had the impetus. We had enough outages where that that was one where I got was resist I got resistance where I just proposed we had some outages, and it's like, okay. Now we could do this. So I brought in a bunch of new ideas. Really don't just what we're doing at least two seven years earlier. Believe it was judgment with with an example of this. But, yeah, if I just come in as a director assuming my engineers knew what they're doing, my engineers are doing great things for a startup. Making ten million dollars. Horrible things for a startup or for a post IPO company that's now over a billion dollars, and I had to change that. I I had to basically do. That's the easiest one in the engineering. Well, I wanna see why I ended up my doing was people management in terms of mechanisms. But and this is that was why an engineer Okay. Let's try the second one in the fifty minutes. Right? People work pretty well. Okay. So so people management actually. Are are your are your team motivated and growing in what is being built? So, again, if you think about what this looks perfectly right, you should never have anyone on leaving any of your teams without you knowing about. Right? If you were if you were the perfect manager, you would know the happiness should be managing to the motivation, you'd be balancing that with the company mission, hiring the perfect people for what you need. Again, that that's this is all the perfection that none of us actually gets there. The full people is obviously important. You'd also be people managing is also culture. You've been making sure your teams and your managers are met always creating the right culture where people can grow. Right? That that's the most important part of safety. So they're allowed to make mistakes for to grow. Again, all all through a hierarchy, you'd be doing this if you feel them perfectly. So coming back, this is why this is a good one because it's alive. So So two months after my engineer, my manager also, and also came out of nowhere. I'll say to this moment, actually, he he got cancer. Like, it wasn't was the one where he was unhappy already. Was just one of those, like, life hit you, and he got cancer and had to leave as well. So the part of that, this is my first time where I took over an existing I guess it took over I had this sort of next generation EC two. Now we think I took over the the one before. This makes sense. Right? You're gonna build the old one. Should build the new one. You should have the old one. So so this made sense to me. Of course, I just lost my lead engineer, and I was very focused on doing it too. So how did I manage and and, actually, the manager of this had ten years more experience in my and, you know, it it was a good manager, actually. Like, it's still an Amazon doing a good job. I met with him. I just said, okay. I'm just gonna do one on ones with you. And every two weeks, like, he we've we've talked a lot about what projects his team was doing. I'd say, are your team happy? You'd always go, oh, yeah. Yeah. My team's happy. And so so I I thought things were going right, actually. It was oldest when I finally got a break in my calendar where I went that they are from thirty hours a week of meeting. It's, like, twenty five, and it's, like, okay. You know, good managers to skip one of us. I should just skip one because I did the one to eleven parts. But I I I find it in some cheap auto ones. And I I think because something about I think I have a better reader of people, but I also think them meeting me, sort of made them a bit more honest, and they had been with him. For him, that was what who's all seeing every week. Right? For me, he was new, and I actually mean, the emergency manager. And I realized half of this eight person team were on the verge of quitting. Like, you could just basically see it in their body language, see it in their questions that they saw no future for their team. The whole irony was I had a teacher for the team in my head. I had this plan, but I'm all gonna transition. We're actually gonna get rid of a fall, can bring the third basis together. Of course, I have not communicated this at all. I know it's a large part of this. And the basic what I had then is a team who had not seen their managers, manager, for four months, and just the sugar ones. The sugar, they didn't have a job. And I was gonna put them out of put the job into an impact. So so, obviously, some some pretty bad business here. So so you sort of you sort of unpack it. My manager was cleared to tackle this one along. So this is he his personality, he loved engineering decisions, and he loved he loved executing. He loved hitting goals. And and so when I really asked him, like, how are you not hearing this? What what were you talking about in one on ones? This is what I was talking about, and he was getting so involved in the immediate problems. He wasn't doing those more step back one on ones at all. So, yeah, he was being too tactical. Because I I I was doing the same thing with him. Like, it wasn't I was just trusting him and and not asking the right questions. I I was too superficial. Okay. Yeah. Your teams are is your team happy? I I I I probably have been doing that. Also, you know, one of the biggest lessons. Did you take other teams to skip one on one straight away? We had a VP leader there at all on the side. He had seventy people. I met with all of us seventy people within a month. Like, it it that was a lot of work, but I think there's a single one of So so when you do this real, I wouldn't I wouldn't do that with 01:50, but I definitely was seventy. I took another work, but I definitely thought it was worth it. And then the big one actually and this is, you know, part of the seven areas is what you find over time is you have natural affinity. You know? I I love engineering. Even today. I love talking architecture. I love talking the hardest problems in the world. I love execution. I love getting stuff done and seeing value in the business. So I have these nudge natural gravity in anything I think about, anything I talk about, that I wasn't thinking about the other errors. Like, I wouldn't say I was a bad people manager. Once there's a bad people manage. Like, it it just clearly I wasn't bringing the time and focus on it. It says that's sort of the the broad lesson that that comes down, which is when your head is down on these areas and and it's often it seems like, you know, your manager is selling it. It's the most important thing for you, the most urgent thing. So from above, you hear that you're doing the right thing. So you sort of close out the broad aspect of a job, focus down. You're the manager. You're the only thing that can actually balance those seven area. So when you're only focusing on a few areas, you will be missing on an others. In this case, I think we we died and saved. We lost two of them. We kept two of them. That was that that was bad. Like, for me losing twenty five percent of the team and essentially six months of taking a mobile. That was really really bad. And so so what I learned from this oh, let's say maybe it finds out what I learned from this, was just how to balance myself better. But look, I couldn't I couldn't just play faster with some people. Now at the time, as I'll talk about, the way that I answered, that was just increasing my hours. So I went from, like, fifty hours a week to sixty hours a week. That's also what you shouldn't do, but but it took me more lessons to to work out not to do that. And so that gets the the second area. So we've got ten minutes left. So this is basically where I break today, and we've got the five areas to come in the later sessions. Do you have any questions on either or two topics or or otherwise? Yeah. I have a little bit of this in my side, and this definitely happens to me a day down as well. Actually, exactly what I talked about. They're seventy one on launch. Right? Like, I dropped strategy strategic stuff out of it. I think the best you can do is again, it's it's sort of the same spreadsheet idea. And you sort of say, okay. What are the tactical things that absolutely must do? And how do I just then have a sanity check on the other area? So, like, in this case, again, I could've done like, skip one on one. I could I could've done half an hour over six over eight week and seeing everyone, and I just didn't do that. And, like, you had that time. Now I know it's you're working more hours than you should be. And so you feel that you not do that. But say maybe it's just a way to keep it, like so so I I said, let's call this piece time versus what time. Like, when you're in what time, you're just being driven by the tactics. And yet that's fine. I think the best you could do is keep a pulse on on the on the other areas that I'm doing. But, yeah, like, again, this is part of a challenge of these areas is we get these lockdown initiatives And, you know, from an leadership perspective, right, there's because they're they're they have been in this position. Right? You he's thinking across seven hundred people, but there's local hotspots. And it's like, well, shall I stop the whole company for these local hot spots? And, you know, what you're, honestly, relying a lot of time your middle managers to have good judgment. And if if things really do go to hell, like, to actually say, look, we've gotta stop. But, of course, for the like, when you're in the middle of that, what it seems like this is the classic, you know, growth thing. It just seems like you're just getting told, I'm really sick stuff, and you're gonna do what you can. So yeah. I I think keeping a poll like, realizing when you're in that situation and not always being that situation is pretty important. Some people just gravitate towards if they want the whole year to be like that. That's open on them or with their leaders because they can't tell their leaders no. But when you really cut, so your leaders know, I I think you can just keep it off. Like, it's I think anything else is just unrealistic. So so, again, you you have trust and you have making that's a sort of, like, old management. You already you always come back to those two things. Definitely I mean, Amazon was good at this. I don't actually offer companies that have been Amazon wasn't good at this book up. I I use engagement surveys So the engagement survey is a company wide survey. You know, it's it's fairly broad. But engineers will give you great comments on that engagement I read everyone. I group them. And if I'm saying consistent things, often it is extremely busy managers who are fairly junior, who are bad at giving feedback, logistics monthly feedback. That's been a constant audit data because we're constantly growing as manager pool, and it's just an easy one to swap out. Well, then then you dive in with that team. Another Like well, I I guess sometimes you have to work at. Do we wanna do I want an awkward process? Pablo, you get hit actually at my level, which I wouldn't have understood before. A process above you is gonna come, but, like, they're gonna take, like, a year. And do you do your interim process, which may well end up undermining the company process if it's sufficiently different? So you you're it's funny when you actually get into why some folks might not have a mechanism if if you want one. But the information source, I'd say, number one is engagement survey. Number two, I still use skips. Like, I I'm I'm very I I have a spreadsheet. I'm very regimented on time. So I won't put more than two hours into them a week, but I'm gonna go abroad and just try and find the people Like, what would you find is there's people in the old who will not one they can't trust or won't trust you. And that's fine, but they're not gonna give you great information. Similar complaint about everything that's not that useful. You find these people in whatever level, whatever role, but they're often very chewy about how the social side works. So so they tell you a lot, not only if there aren't experience in people around them and bumping it up. So so that's that's how I do it. It's it's a combination of trusted mechanism But engagement surveys, honestly, reading the feedback, like, making myself go through it even as it's brutal sometimes. Did you get a lot of idealism in there? But when ten people saying the same thing, you've got a problem. And so so is that that's that's sort of my number one mechanism. We got five more minutes for one more question. It's funny. It's actually it's a good question, but that's not what I got. Like, did this team the leader had been writing them hard, and there was you know, you were seeing behavioral issues across the org. But they actually see very, very loss of a leader, and and he he left so so a lot of what I was doing was sort of allowing the emotional level to be discussed and come down. Actually, I discovered is even as his leader was very loved by his directs. He was very clear, but they all knew he was pushing him too hard, and they also have talked crap about it. And so to the extent, I was just there listening. I've been talking about stuff that they knew. It was, like, three days beneath me, and I couldn't help with. That to me was a lot of it. Like, I don't it really work. Like, it it sounds try the shop the the time was just showing that I care. Showing that I was listening. I don't think again, the the surprise is actually that there was less explanation of things than than I had to do. They sort of understood what was happening. What they wanted to hear, like, what I dig it out of it, but it was just the obvious was want to hear what their future was. But that was in follow ups. I actually had to then put together a quick road map and present every quarter to that org. Actually, all my original oh, not ignore, but we'll keep the pulse of that all versus bringing all time into the new world. Yeah. But a lot of it was just here in the direction, hearing a leader really want to hear about their problems. It it wasn't anything too surprising, actually. Now that could be different depending upon the exact the exact organization. It's a good quick one thing I definitely got good at this at the time. I don't think I was good at this at two signal. One of the things I kept doing was I keep at the bottom of my nerd take a notepad from one on one to one on one. I'll have my name of my next upcoming one on ones, and I'd be trying to generate topics. So I actually think a good amount of one on ones. I I just talked about this later. He's trying to generate topics that are interesting and relevant to their role, then you can just talk about their opinions So so do I always think about, like, these days, I I try very, very hard to always say, just wanna learn about your time, not mine. I can always create questions, but I wanna talk about what you do a lot more. So about what what advice about how to get used to that, they come with their own agendas, and that's when I probably learn the most. But then I do make sure, actually, they don't prep. They actually know what project they're working on. I have opinions about about where it might be going, and I I can you know, I often say, like, a very transparent is hilarious. I'm gonna ask you some hard questions. But if you do that with a open and honest way, you often get interesting responses. But I I do like it. It's not just wasn't sufficient for me to do the skips. It it it is creating content. And that's actually true for sideways as well. Partners, I found out the time. If you just meet every month and have nothing to talk about, you're not doing a relationship. You had to generate content. And for me, it was just generating three to four bullet points of what they're working on, maybe who they're working with, And that that was enough of me to just make it happen. Okay. Two more minutes. So we have time for one quick question, and we can leave it here. Think we can leave it here because probably you'll got meetings. What I I don't we probably order. So, Alex, I thank you. This is actually gone really, very well, and your questions have all been great. So this is at least the next two is how I intend to do it. Then maybe the fourth one tend to maybe do a bit more workshop, but we're helping each other, depending upon how we get through the content and how it's going. But if you wanna see, you know, the next one is gonna be on execution, which is more like the project management stuff. But I'd like to say thank you to everyone, and I I hope to see you all in a couple of weeks. Thank you.